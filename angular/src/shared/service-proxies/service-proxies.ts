/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v8.8.6231.38725 (NJsonSchema v7.7.6231.35489) (http://NSwag.org)
// </auto-generated>
//----------------------

import * as moment from 'moment';

import 'rxjs/Rx'; 
import {Observable} from 'rxjs/Observable';
import {Injectable, Inject, Optional, OpaqueToken} from '@angular/core';
import {Http, Headers, Response, RequestOptionsArgs} from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

@Injectable()
export class AccountServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    isTenantAvailable(input: IsTenantAvailableInput): Observable<IsTenantAvailableOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/IsTenantAvailable";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processIsTenantAvailable(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processIsTenantAvailable(response));
                } catch (e) {
                    return <Observable<IsTenantAvailableOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<IsTenantAvailableOutput>><any>Observable.throw(response);
        });
    }

    protected processIsTenantAvailable(response: Response): IsTenantAvailableOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: IsTenantAvailableOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? IsTenantAvailableOutput.fromJS(resultData200) : new IsTenantAvailableOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    register(input: RegisterInput): Observable<RegisterOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Register";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processRegister(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processRegister(response));
                } catch (e) {
                    return <Observable<RegisterOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<RegisterOutput>><any>Observable.throw(response);
        });
    }

    protected processRegister(response: Response): RegisterOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: RegisterOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterOutput.fromJS(resultData200) : new RegisterOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class AuditLogServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getAll(): Observable<ListResultDtoOfAuditLogListDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAll";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAll(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAll(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfAuditLogListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfAuditLogListDto>><any>Observable.throw(response);
        });
    }

    protected processGetAll(response: Response): ListResultDtoOfAuditLogListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfAuditLogListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfAuditLogListDto.fromJS(resultData200) : new ListResultDtoOfAuditLogListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    pagedResult(input: GetAuditLogsInput): Observable<PagedResultDtoOfAuditLogListDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/PagedResult";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processPagedResult(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processPagedResult(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfAuditLogListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfAuditLogListDto>><any>Observable.throw(response);
        });
    }

    protected processPagedResult(response: Response): PagedResultDtoOfAuditLogListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfAuditLogListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfAuditLogListDto.fromJS(resultData200) : new PagedResultDtoOfAuditLogListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    get(id: number): Observable<AuditLogDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/Get?";
        if (id !== undefined)
        
            url_ += "id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<AuditLogDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuditLogDto>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): AuditLogDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AuditLogDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuditLogDto.fromJS(resultData200) : new AuditLogDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class ConfigurationServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    changeUiTheme(input: ChangeUiThemeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Configuration/ChangeUiTheme";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processChangeUiTheme(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processChangeUiTheme(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processChangeUiTheme(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class PermissionServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getAll(): Observable<ListResultDtoOfPermissionDto> {
        let url_ = this.baseUrl + "/api/services/app/Permission/GetAll";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAll(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAll(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfPermissionDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfPermissionDto>><any>Observable.throw(response);
        });
    }

    protected processGetAll(response: Response): ListResultDtoOfPermissionDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfPermissionDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfPermissionDto.fromJS(resultData200) : new ListResultDtoOfPermissionDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class RoleServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    create(input: CreateRoleInput): Observable<RoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/Create";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreate(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreate(response));
                } catch (e) {
                    return <Observable<RoleDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<RoleDto>><any>Observable.throw(response);
        });
    }

    protected processCreate(response: Response): RoleDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: RoleDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RoleDto.fromJS(resultData200) : new RoleDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    update(input: UpdateRoleInput): Observable<RoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/Update";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdate(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdate(response));
                } catch (e) {
                    return <Observable<RoleDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<RoleDto>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): RoleDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: RoleDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RoleDto.fromJS(resultData200) : new RoleDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/Delete?";
        if (id !== undefined)
        
            url_ += "Id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDelete(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    grantAllPermissionsForHost(password: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/GrantAllPermissionsForHost?";
        if (password !== undefined)
        
            url_ += "password=" + encodeURIComponent("" + password) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGrantAllPermissionsForHost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGrantAllPermissionsForHost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processGrantAllPermissionsForHost(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    grantAllPermissionsForAllTenant(password: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/GrantAllPermissionsForAllTenant?";
        if (password !== undefined)
        
            url_ += "password=" + encodeURIComponent("" + password) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGrantAllPermissionsForAllTenant(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGrantAllPermissionsForAllTenant(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processGrantAllPermissionsForAllTenant(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    get(id: number): Observable<RoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/Get?";
        if (id !== undefined)
        
            url_ += "Id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<RoleDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<RoleDto>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): RoleDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: RoleDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RoleDto.fromJS(resultData200) : new RoleDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAll(skipCount: number, maxResultCount: number): Observable<PagedResultDtoOfRoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetAll?";
        if (skipCount !== undefined)
        
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        
        if (maxResultCount !== undefined)
        
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAll(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAll(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfRoleDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfRoleDto>><any>Observable.throw(response);
        });
    }

    protected processGetAll(response: Response): PagedResultDtoOfRoleDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfRoleDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfRoleDto.fromJS(resultData200) : new PagedResultDtoOfRoleDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class SessionServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getCurrentLoginInformations(): Observable<GetCurrentLoginInformationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/GetCurrentLoginInformations";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetCurrentLoginInformations(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetCurrentLoginInformations(response));
                } catch (e) {
                    return <Observable<GetCurrentLoginInformationsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetCurrentLoginInformationsOutput>><any>Observable.throw(response);
        });
    }

    protected processGetCurrentLoginInformations(response: Response): GetCurrentLoginInformationsOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetCurrentLoginInformationsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCurrentLoginInformationsOutput.fromJS(resultData200) : new GetCurrentLoginInformationsOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class SettingServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getAll(): Observable<ISettingValue[]> {
        let url_ = this.baseUrl + "/api/services/app/Setting/GetAll";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAll(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAll(response));
                } catch (e) {
                    return <Observable<ISettingValue[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ISettingValue[]>><any>Observable.throw(response);
        });
    }

    protected processGetAll(response: Response): ISettingValue[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ISettingValue[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ISettingValue.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    get(): Observable<SettingDto> {
        let url_ = this.baseUrl + "/api/services/app/Setting/Get";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<SettingDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<SettingDto>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): SettingDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SettingDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SettingDto.fromJS(resultData200) : new SettingDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    update(input: SettingDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Setting/Update";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdate(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdate(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class TenantServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    get(id: number): Observable<TenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Get?";
        if (id !== undefined)
        
            url_ += "Id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<TenantDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TenantDto>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): TenantDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: TenantDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantDto.fromJS(resultData200) : new TenantDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    create(input: CreateTenantInput): Observable<TenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Create";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreate(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreate(response));
                } catch (e) {
                    return <Observable<TenantDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TenantDto>><any>Observable.throw(response);
        });
    }

    protected processCreate(response: Response): TenantDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: TenantDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantDto.fromJS(resultData200) : new TenantDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    update(input: UpdateTenantInput): Observable<TenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Update";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdate(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdate(response));
                } catch (e) {
                    return <Observable<TenantDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TenantDto>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): TenantDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: TenantDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantDto.fromJS(resultData200) : new TenantDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Delete?";
        if (id !== undefined)
        
            url_ += "Id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDelete(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAll(skipCount: number, maxResultCount: number): Observable<PagedResultDtoOfTenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetAll?";
        if (skipCount !== undefined)
        
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        
        if (maxResultCount !== undefined)
        
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAll(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAll(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfTenantDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfTenantDto>><any>Observable.throw(response);
        });
    }

    protected processGetAll(response: Response): PagedResultDtoOfTenantDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfTenantDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfTenantDto.fromJS(resultData200) : new PagedResultDtoOfTenantDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class TokenAuthServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    authenticate(model: AuthenticateModel): Observable<AuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/Authenticate";

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processAuthenticate(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processAuthenticate(response));
                } catch (e) {
                    return <Observable<AuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuthenticateResultModel>><any>Observable.throw(response);
        });
    }

    protected processAuthenticate(response: Response): AuthenticateResultModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthenticateResultModel.fromJS(resultData200) : new AuthenticateResultModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getExternalAuthenticationProviders(): Observable<ExternalLoginProviderInfoModel[]> {
        let url_ = this.baseUrl + "/api/TokenAuth/GetExternalAuthenticationProviders";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetExternalAuthenticationProviders(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetExternalAuthenticationProviders(response));
                } catch (e) {
                    return <Observable<ExternalLoginProviderInfoModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalLoginProviderInfoModel[]>><any>Observable.throw(response);
        });
    }

    protected processGetExternalAuthenticationProviders(response: Response): ExternalLoginProviderInfoModel[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ExternalLoginProviderInfoModel[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ExternalLoginProviderInfoModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    externalAuthenticate(model: ExternalAuthenticateModel): Observable<ExternalAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ExternalAuthenticate";

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processExternalAuthenticate(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processExternalAuthenticate(response));
                } catch (e) {
                    return <Observable<ExternalAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalAuthenticateResultModel>><any>Observable.throw(response);
        });
    }

    protected processExternalAuthenticate(response: Response): ExternalAuthenticateResultModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ExternalAuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ExternalAuthenticateResultModel.fromJS(resultData200) : new ExternalAuthenticateResultModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class UserServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    create(input: CreateUserInput): Observable<UserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/Create";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreate(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreate(response));
                } catch (e) {
                    return <Observable<UserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<UserDto>><any>Observable.throw(response);
        });
    }

    protected processCreate(response: Response): UserDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: UserDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserDto.fromJS(resultData200) : new UserDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    update(input: UpdateUserInput): Observable<UserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/Update";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdate(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdate(response));
                } catch (e) {
                    return <Observable<UserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<UserDto>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): UserDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: UserDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserDto.fromJS(resultData200) : new UserDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/Delete?";
        if (id !== undefined)
        
            url_ += "Id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDelete(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    prohibitPermission(input: ProhibitPermissionInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ProhibitPermission";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processProhibitPermission(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processProhibitPermission(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processProhibitPermission(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    resetUserSpecificPermissions(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ResetUserSpecificPermissions?";
        if (id !== undefined)
        
            url_ += "id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processResetUserSpecificPermissions(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processResetUserSpecificPermissions(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processResetUserSpecificPermissions(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    unlock(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/Unlock?";
        if (id !== undefined)
        
            url_ += "id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUnlock(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUnlock(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUnlock(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    updateUserPermissions(input: UserPermissionsInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UpdateUserPermissions";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateUserPermissions(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateUserPermissions(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateUserPermissions(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    resetPassword(input: ChangeUserPasswordInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ResetPassword";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processResetPassword(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processResetPassword(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processResetPassword(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    get(id: number): Observable<UserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/Get?";
        if (id !== undefined)
        
            url_ += "Id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<UserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<UserDto>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): UserDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: UserDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserDto.fromJS(resultData200) : new UserDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAll(skipCount: number, maxResultCount: number): Observable<PagedResultDtoOfUserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetAll?";
        if (skipCount !== undefined)
        
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        
        if (maxResultCount !== undefined)
        
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAll(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAll(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfUserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfUserDto>><any>Observable.throw(response);
        });
    }

    protected processGetAll(response: Response): PagedResultDtoOfUserDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfUserDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfUserDto.fromJS(resultData200) : new PagedResultDtoOfUserDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class UserProfileServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    get(): Observable<UserProfileInfoDto> {
        let url_ = this.baseUrl + "/api/services/app/UserProfile/Get";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<UserProfileInfoDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<UserProfileInfoDto>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): UserProfileInfoDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: UserProfileInfoDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserProfileInfoDto.fromJS(resultData200) : new UserProfileInfoDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    updateUserProfile(input: UpdateUserProfileInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserProfile/UpdateUserProfile";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateUserProfile(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateUserProfile(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateUserProfile(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    changePassword(input: ChangePasswordInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserProfile/ChangePassword";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processChangePassword(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processChangePassword(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processChangePassword(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

export class IsTenantAvailableInput { 
    tenancyName: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
        }
    }

    static fromJS(data: any): IsTenantAvailableInput {
        return new IsTenantAvailableInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IsTenantAvailableInput(JSON.parse(json));
    }
}

export class IsTenantAvailableOutput { 
    state: IsTenantAvailableOutputState; 
    tenantId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.state = data["state"] !== undefined ? data["state"] : null;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
        }
    }

    static fromJS(data: any): IsTenantAvailableOutput {
        return new IsTenantAvailableOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["state"] = this.state !== undefined ? this.state : null;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IsTenantAvailableOutput(JSON.parse(json));
    }
}

export class RegisterInput { 
    firstName: string; 
    lastName: string; 
    userName: string; 
    emailAddress: string; 
    password: string; 
    captchaResponse: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : null;
            this.lastName = data["lastName"] !== undefined ? data["lastName"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.password = data["password"] !== undefined ? data["password"] : null;
            this.captchaResponse = data["captchaResponse"] !== undefined ? data["captchaResponse"] : null;
        }
    }

    static fromJS(data: any): RegisterInput {
        return new RegisterInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["firstName"] = this.firstName !== undefined ? this.firstName : null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["password"] = this.password !== undefined ? this.password : null;
        data["captchaResponse"] = this.captchaResponse !== undefined ? this.captchaResponse : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterInput(JSON.parse(json));
    }
}

export class RegisterOutput { 
    canLogin: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.canLogin = data["canLogin"] !== undefined ? data["canLogin"] : null;
        }
    }

    static fromJS(data: any): RegisterOutput {
        return new RegisterOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["canLogin"] = this.canLogin !== undefined ? this.canLogin : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterOutput(JSON.parse(json));
    }
}

export class ListResultDtoOfAuditLogListDto { 
    items: AuditLogListDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(AuditLogListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfAuditLogListDto {
        return new ListResultDtoOfAuditLogListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfAuditLogListDto(JSON.parse(json));
    }
}

export class AuditLogListDto { 
    userId: number; 
    userName: string; 
    serviceName: string; 
    methodName: string; 
    executionTime: moment.Moment; 
    executionDuration: number; 
    clientIpAddress: string; 
    clientName: string; 
    browserInfo: string; 
    exception: string; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.serviceName = data["serviceName"] !== undefined ? data["serviceName"] : null;
            this.methodName = data["methodName"] !== undefined ? data["methodName"] : null;
            this.executionTime = data["executionTime"] ? moment(data["executionTime"].toString()) : null;
            this.executionDuration = data["executionDuration"] !== undefined ? data["executionDuration"] : null;
            this.clientIpAddress = data["clientIpAddress"] !== undefined ? data["clientIpAddress"] : null;
            this.clientName = data["clientName"] !== undefined ? data["clientName"] : null;
            this.browserInfo = data["browserInfo"] !== undefined ? data["browserInfo"] : null;
            this.exception = data["exception"] !== undefined ? data["exception"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): AuditLogListDto {
        return new AuditLogListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["serviceName"] = this.serviceName !== undefined ? this.serviceName : null;
        data["methodName"] = this.methodName !== undefined ? this.methodName : null;
        data["executionTime"] = this.executionTime ? this.executionTime.toISOString() : null;
        data["executionDuration"] = this.executionDuration !== undefined ? this.executionDuration : null;
        data["clientIpAddress"] = this.clientIpAddress !== undefined ? this.clientIpAddress : null;
        data["clientName"] = this.clientName !== undefined ? this.clientName : null;
        data["browserInfo"] = this.browserInfo !== undefined ? this.browserInfo : null;
        data["exception"] = this.exception !== undefined ? this.exception : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuditLogListDto(JSON.parse(json));
    }
}

export class GetAuditLogsInput { 
    maxResultCount: number; 
    skipCount: number; 
    sorting: string; 
    startDate: moment.Moment; 
    endDate: moment.Moment; 
    executionDurationFrom: number; 
    executionDurationTo: number; 
    userName: string; 
    serviceName: string; 
    methodName: string; 
    browserInfo: string; 
    hasError: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.maxResultCount = data["maxResultCount"] !== undefined ? data["maxResultCount"] : null;
            this.skipCount = data["skipCount"] !== undefined ? data["skipCount"] : null;
            this.sorting = data["sorting"] !== undefined ? data["sorting"] : null;
            this.startDate = data["startDate"] ? moment(data["startDate"].toString()) : null;
            this.endDate = data["endDate"] ? moment(data["endDate"].toString()) : null;
            this.executionDurationFrom = data["executionDurationFrom"] !== undefined ? data["executionDurationFrom"] : null;
            this.executionDurationTo = data["executionDurationTo"] !== undefined ? data["executionDurationTo"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.serviceName = data["serviceName"] !== undefined ? data["serviceName"] : null;
            this.methodName = data["methodName"] !== undefined ? data["methodName"] : null;
            this.browserInfo = data["browserInfo"] !== undefined ? data["browserInfo"] : null;
            this.hasError = data["hasError"] !== undefined ? data["hasError"] : null;
        }
    }

    static fromJS(data: any): GetAuditLogsInput {
        return new GetAuditLogsInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["maxResultCount"] = this.maxResultCount !== undefined ? this.maxResultCount : null;
        data["skipCount"] = this.skipCount !== undefined ? this.skipCount : null;
        data["sorting"] = this.sorting !== undefined ? this.sorting : null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : null;
        data["executionDurationFrom"] = this.executionDurationFrom !== undefined ? this.executionDurationFrom : null;
        data["executionDurationTo"] = this.executionDurationTo !== undefined ? this.executionDurationTo : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["serviceName"] = this.serviceName !== undefined ? this.serviceName : null;
        data["methodName"] = this.methodName !== undefined ? this.methodName : null;
        data["browserInfo"] = this.browserInfo !== undefined ? this.browserInfo : null;
        data["hasError"] = this.hasError !== undefined ? this.hasError : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetAuditLogsInput(JSON.parse(json));
    }
}

export class PagedResultDtoOfAuditLogListDto { 
    totalCount: number; 
    items: AuditLogListDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : null;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(AuditLogListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfAuditLogListDto {
        return new PagedResultDtoOfAuditLogListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : null;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfAuditLogListDto(JSON.parse(json));
    }
}

export class AuditLogDto { 
    userName: string; 
    serviceName: string; 
    methodName: string; 
    parameters: string; 
    executionTime: moment.Moment; 
    executionTimeAgo: string; 
    executionDuration: number; 
    clientIpAddress: string; 
    clientName: string; 
    browserInfo: string; 
    exception: string; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.serviceName = data["serviceName"] !== undefined ? data["serviceName"] : null;
            this.methodName = data["methodName"] !== undefined ? data["methodName"] : null;
            this.parameters = data["parameters"] !== undefined ? data["parameters"] : null;
            this.executionTime = data["executionTime"] ? moment(data["executionTime"].toString()) : null;
            this.executionTimeAgo = data["executionTimeAgo"] !== undefined ? data["executionTimeAgo"] : null;
            this.executionDuration = data["executionDuration"] !== undefined ? data["executionDuration"] : null;
            this.clientIpAddress = data["clientIpAddress"] !== undefined ? data["clientIpAddress"] : null;
            this.clientName = data["clientName"] !== undefined ? data["clientName"] : null;
            this.browserInfo = data["browserInfo"] !== undefined ? data["browserInfo"] : null;
            this.exception = data["exception"] !== undefined ? data["exception"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): AuditLogDto {
        return new AuditLogDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["serviceName"] = this.serviceName !== undefined ? this.serviceName : null;
        data["methodName"] = this.methodName !== undefined ? this.methodName : null;
        data["parameters"] = this.parameters !== undefined ? this.parameters : null;
        data["executionTime"] = this.executionTime ? this.executionTime.toISOString() : null;
        data["executionTimeAgo"] = this.executionTimeAgo !== undefined ? this.executionTimeAgo : null;
        data["executionDuration"] = this.executionDuration !== undefined ? this.executionDuration : null;
        data["clientIpAddress"] = this.clientIpAddress !== undefined ? this.clientIpAddress : null;
        data["clientName"] = this.clientName !== undefined ? this.clientName : null;
        data["browserInfo"] = this.browserInfo !== undefined ? this.browserInfo : null;
        data["exception"] = this.exception !== undefined ? this.exception : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuditLogDto(JSON.parse(json));
    }
}

export class ChangeUiThemeInput { 
    theme: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.theme = data["theme"] !== undefined ? data["theme"] : null;
        }
    }

    static fromJS(data: any): ChangeUiThemeInput {
        return new ChangeUiThemeInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["theme"] = this.theme !== undefined ? this.theme : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ChangeUiThemeInput(JSON.parse(json));
    }
}

export class ListResultDtoOfPermissionDto { 
    items: PermissionDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(PermissionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfPermissionDto {
        return new ListResultDtoOfPermissionDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfPermissionDto(JSON.parse(json));
    }
}

export class PermissionDto { 
    name: string; 
    displayName: string; 
    parentName: string; 
    description: string; 
    level: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.parentName = data["parentName"] !== undefined ? data["parentName"] : null;
            this.description = data["description"] !== undefined ? data["description"] : null;
            this.level = data["level"] !== undefined ? data["level"] : null;
        }
    }

    static fromJS(data: any): PermissionDto {
        return new PermissionDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["parentName"] = this.parentName !== undefined ? this.parentName : null;
        data["description"] = this.description !== undefined ? this.description : null;
        data["level"] = this.level !== undefined ? this.level : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PermissionDto(JSON.parse(json));
    }
}

export class CreateRoleInput { 
    name: string; 
    displayName: string; 
    normalizedName: string; 
    description: string; 
    isActive: boolean; 
    isStatic: boolean; 
    permissions: string[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.normalizedName = data["normalizedName"] !== undefined ? data["normalizedName"] : null;
            this.description = data["description"] !== undefined ? data["description"] : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            this.isStatic = data["isStatic"] !== undefined ? data["isStatic"] : null;
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(item);
            }
        }
    }

    static fromJS(data: any): CreateRoleInput {
        return new CreateRoleInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["normalizedName"] = this.normalizedName !== undefined ? this.normalizedName : null;
        data["description"] = this.description !== undefined ? this.description : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        data["isStatic"] = this.isStatic !== undefined ? this.isStatic : null;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateRoleInput(JSON.parse(json));
    }
}

export class RoleDto { 
    name: string; 
    displayName: string; 
    normalizedName: string; 
    description: string; 
    isActive: boolean; 
    isStatic: boolean; 
    permissions: string[]; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.normalizedName = data["normalizedName"] !== undefined ? data["normalizedName"] : null;
            this.description = data["description"] !== undefined ? data["description"] : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            this.isStatic = data["isStatic"] !== undefined ? data["isStatic"] : null;
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(item);
            }
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): RoleDto {
        return new RoleDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["normalizedName"] = this.normalizedName !== undefined ? this.normalizedName : null;
        data["description"] = this.description !== undefined ? this.description : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        data["isStatic"] = this.isStatic !== undefined ? this.isStatic : null;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RoleDto(JSON.parse(json));
    }
}

export class UpdateRoleInput { 
    name: string; 
    displayName: string; 
    normalizedName: string; 
    description: string; 
    isActive: boolean; 
    isStatic: boolean; 
    permissions: string[]; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.normalizedName = data["normalizedName"] !== undefined ? data["normalizedName"] : null;
            this.description = data["description"] !== undefined ? data["description"] : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            this.isStatic = data["isStatic"] !== undefined ? data["isStatic"] : null;
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(item);
            }
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): UpdateRoleInput {
        return new UpdateRoleInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["normalizedName"] = this.normalizedName !== undefined ? this.normalizedName : null;
        data["description"] = this.description !== undefined ? this.description : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        data["isStatic"] = this.isStatic !== undefined ? this.isStatic : null;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateRoleInput(JSON.parse(json));
    }
}

export class PagedResultDtoOfRoleDto { 
    totalCount: number; 
    items: RoleDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : null;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(RoleDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRoleDto {
        return new PagedResultDtoOfRoleDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : null;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfRoleDto(JSON.parse(json));
    }
}

export class GetCurrentLoginInformationsOutput { 
    application: ApplicationInfoDto; 
    user: UserLoginInfoDto; 
    tenant: TenantLoginInfoDto;
    constructor(data?: any) {
        if (data !== undefined) {
            this.application = data["application"] ? ApplicationInfoDto.fromJS(data["application"]) : null;
            this.user = data["user"] ? UserLoginInfoDto.fromJS(data["user"]) : null;
            this.tenant = data["tenant"] ? TenantLoginInfoDto.fromJS(data["tenant"]) : null;
        }
    }

    static fromJS(data: any): GetCurrentLoginInformationsOutput {
        return new GetCurrentLoginInformationsOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["application"] = this.application ? this.application.toJS() : null;
        data["user"] = this.user ? this.user.toJS() : null;
        data["tenant"] = this.tenant ? this.tenant.toJS() : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetCurrentLoginInformationsOutput(JSON.parse(json));
    }
}

export class ApplicationInfoDto { 
    version: string; 
    releaseDate: moment.Moment; 
    features: { [key: string] : boolean; };
    constructor(data?: any) {
        if (data !== undefined) {
            this.version = data["version"] !== undefined ? data["version"] : null;
            this.releaseDate = data["releaseDate"] ? moment(data["releaseDate"].toString()) : null;
            if (data["features"]) {
                this.features = {};
                for (let key in data["features"]) {
                    if (data["features"].hasOwnProperty(key))
                        this.features[key] = data["features"][key] !== undefined ? data["features"][key] : null;
                }
            }
        }
    }

    static fromJS(data: any): ApplicationInfoDto {
        return new ApplicationInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["version"] = this.version !== undefined ? this.version : null;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : null;
        if (this.features) {
            data["features"] = {};
            for (let key in this.features) {
                if (this.features.hasOwnProperty(key))
                    data["features"][key] = this.features[key] !== undefined ? this.features[key] : null;
            }
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ApplicationInfoDto(JSON.parse(json));
    }
}

export class UserLoginInfoDto { 
    firstName: string; 
    lastName: string; 
    userName: string; 
    emailAddress: string; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : null;
            this.lastName = data["lastName"] !== undefined ? data["lastName"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): UserLoginInfoDto {
        return new UserLoginInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["firstName"] = this.firstName !== undefined ? this.firstName : null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserLoginInfoDto(JSON.parse(json));
    }
}

export class TenantLoginInfoDto { 
    tenancyName: string; 
    name: string; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): TenantLoginInfoDto {
        return new TenantLoginInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantLoginInfoDto(JSON.parse(json));
    }
}

export class ISettingValue { 
    name: string; 
    value: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.value = data["value"] !== undefined ? data["value"] : null;
        }
    }

    static fromJS(data: any): ISettingValue {
        return new ISettingValue(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["value"] = this.value !== undefined ? this.value : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ISettingValue(JSON.parse(json));
    }
}

export class SettingDto { 
    defaultPasswordComplexity: DefaultPasswordComplexityDto; 
    passwordComplexity: PasswordComplexityDto; 
    userLockOut: UserLockOutDto; 
    userManagement: UserManagementDto;
    constructor(data?: any) {
        if (data !== undefined) {
            this.defaultPasswordComplexity = data["defaultPasswordComplexity"] ? DefaultPasswordComplexityDto.fromJS(data["defaultPasswordComplexity"]) : null;
            this.passwordComplexity = data["passwordComplexity"] ? PasswordComplexityDto.fromJS(data["passwordComplexity"]) : null;
            this.userLockOut = data["userLockOut"] ? UserLockOutDto.fromJS(data["userLockOut"]) : null;
            this.userManagement = data["userManagement"] ? UserManagementDto.fromJS(data["userManagement"]) : null;
        }
    }

    static fromJS(data: any): SettingDto {
        return new SettingDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["defaultPasswordComplexity"] = this.defaultPasswordComplexity ? this.defaultPasswordComplexity.toJS() : null;
        data["passwordComplexity"] = this.passwordComplexity ? this.passwordComplexity.toJS() : null;
        data["userLockOut"] = this.userLockOut ? this.userLockOut.toJS() : null;
        data["userManagement"] = this.userManagement ? this.userManagement.toJS() : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SettingDto(JSON.parse(json));
    }
}

export class DefaultPasswordComplexityDto { 
    requiredLength: number; 
    requireUppercase: boolean; 
    requireLowercase: boolean; 
    requireDigit: boolean; 
    requireNonAlphanumeric: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.requiredLength = data["requiredLength"] !== undefined ? data["requiredLength"] : null;
            this.requireUppercase = data["requireUppercase"] !== undefined ? data["requireUppercase"] : null;
            this.requireLowercase = data["requireLowercase"] !== undefined ? data["requireLowercase"] : null;
            this.requireDigit = data["requireDigit"] !== undefined ? data["requireDigit"] : null;
            this.requireNonAlphanumeric = data["requireNonAlphanumeric"] !== undefined ? data["requireNonAlphanumeric"] : null;
        }
    }

    static fromJS(data: any): DefaultPasswordComplexityDto {
        return new DefaultPasswordComplexityDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["requiredLength"] = this.requiredLength !== undefined ? this.requiredLength : null;
        data["requireUppercase"] = this.requireUppercase !== undefined ? this.requireUppercase : null;
        data["requireLowercase"] = this.requireLowercase !== undefined ? this.requireLowercase : null;
        data["requireDigit"] = this.requireDigit !== undefined ? this.requireDigit : null;
        data["requireNonAlphanumeric"] = this.requireNonAlphanumeric !== undefined ? this.requireNonAlphanumeric : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new DefaultPasswordComplexityDto(JSON.parse(json));
    }
}

export class PasswordComplexityDto { 
    useDefaultPasswordComplexitySettings: boolean; 
    requiredLength: number; 
    requireUppercase: boolean; 
    requireLowercase: boolean; 
    requireDigit: boolean; 
    requireNonAlphanumeric: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.useDefaultPasswordComplexitySettings = data["useDefaultPasswordComplexitySettings"] !== undefined ? data["useDefaultPasswordComplexitySettings"] : null;
            this.requiredLength = data["requiredLength"] !== undefined ? data["requiredLength"] : null;
            this.requireUppercase = data["requireUppercase"] !== undefined ? data["requireUppercase"] : null;
            this.requireLowercase = data["requireLowercase"] !== undefined ? data["requireLowercase"] : null;
            this.requireDigit = data["requireDigit"] !== undefined ? data["requireDigit"] : null;
            this.requireNonAlphanumeric = data["requireNonAlphanumeric"] !== undefined ? data["requireNonAlphanumeric"] : null;
        }
    }

    static fromJS(data: any): PasswordComplexityDto {
        return new PasswordComplexityDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["useDefaultPasswordComplexitySettings"] = this.useDefaultPasswordComplexitySettings !== undefined ? this.useDefaultPasswordComplexitySettings : null;
        data["requiredLength"] = this.requiredLength !== undefined ? this.requiredLength : null;
        data["requireUppercase"] = this.requireUppercase !== undefined ? this.requireUppercase : null;
        data["requireLowercase"] = this.requireLowercase !== undefined ? this.requireLowercase : null;
        data["requireDigit"] = this.requireDigit !== undefined ? this.requireDigit : null;
        data["requireNonAlphanumeric"] = this.requireNonAlphanumeric !== undefined ? this.requireNonAlphanumeric : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PasswordComplexityDto(JSON.parse(json));
    }
}

export class UserLockOutDto { 
    isEnabled: boolean; 
    defaultAccountLockoutSeconds: number; 
    maxFailedAccessAttemptsBeforeLockout: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.isEnabled = data["isEnabled"] !== undefined ? data["isEnabled"] : null;
            this.defaultAccountLockoutSeconds = data["defaultAccountLockoutSeconds"] !== undefined ? data["defaultAccountLockoutSeconds"] : null;
            this.maxFailedAccessAttemptsBeforeLockout = data["maxFailedAccessAttemptsBeforeLockout"] !== undefined ? data["maxFailedAccessAttemptsBeforeLockout"] : null;
        }
    }

    static fromJS(data: any): UserLockOutDto {
        return new UserLockOutDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : null;
        data["defaultAccountLockoutSeconds"] = this.defaultAccountLockoutSeconds !== undefined ? this.defaultAccountLockoutSeconds : null;
        data["maxFailedAccessAttemptsBeforeLockout"] = this.maxFailedAccessAttemptsBeforeLockout !== undefined ? this.maxFailedAccessAttemptsBeforeLockout : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserLockOutDto(JSON.parse(json));
    }
}

export class UserManagementDto { 
    isEmailConfirmationRequiredForLogin: boolean; 
    isNewRegisteredUserActiveByDefault: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.isEmailConfirmationRequiredForLogin = data["isEmailConfirmationRequiredForLogin"] !== undefined ? data["isEmailConfirmationRequiredForLogin"] : null;
            this.isNewRegisteredUserActiveByDefault = data["isNewRegisteredUserActiveByDefault"] !== undefined ? data["isNewRegisteredUserActiveByDefault"] : null;
        }
    }

    static fromJS(data: any): UserManagementDto {
        return new UserManagementDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["isEmailConfirmationRequiredForLogin"] = this.isEmailConfirmationRequiredForLogin !== undefined ? this.isEmailConfirmationRequiredForLogin : null;
        data["isNewRegisteredUserActiveByDefault"] = this.isNewRegisteredUserActiveByDefault !== undefined ? this.isNewRegisteredUserActiveByDefault : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserManagementDto(JSON.parse(json));
    }
}

export class TenantDto { 
    tenancyName: string; 
    name: string; 
    adminEmailAddress: string; 
    connectionString: string; 
    isActive: boolean; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.adminEmailAddress = data["adminEmailAddress"] !== undefined ? data["adminEmailAddress"] : null;
            this.connectionString = data["connectionString"] !== undefined ? data["connectionString"] : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): TenantDto {
        return new TenantDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["adminEmailAddress"] = this.adminEmailAddress !== undefined ? this.adminEmailAddress : null;
        data["connectionString"] = this.connectionString !== undefined ? this.connectionString : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantDto(JSON.parse(json));
    }
}

export class CreateTenantInput { 
    tenancyName: string; 
    name: string; 
    adminEmailAddress: string; 
    connectionString: string; 
    isActive: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.adminEmailAddress = data["adminEmailAddress"] !== undefined ? data["adminEmailAddress"] : null;
            this.connectionString = data["connectionString"] !== undefined ? data["connectionString"] : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
        }
    }

    static fromJS(data: any): CreateTenantInput {
        return new CreateTenantInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["adminEmailAddress"] = this.adminEmailAddress !== undefined ? this.adminEmailAddress : null;
        data["connectionString"] = this.connectionString !== undefined ? this.connectionString : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateTenantInput(JSON.parse(json));
    }
}

export class UpdateTenantInput { 
    tenancyName: string; 
    name: string; 
    adminEmailAddress: string; 
    connectionString: string; 
    isActive: boolean; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.adminEmailAddress = data["adminEmailAddress"] !== undefined ? data["adminEmailAddress"] : null;
            this.connectionString = data["connectionString"] !== undefined ? data["connectionString"] : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): UpdateTenantInput {
        return new UpdateTenantInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["adminEmailAddress"] = this.adminEmailAddress !== undefined ? this.adminEmailAddress : null;
        data["connectionString"] = this.connectionString !== undefined ? this.connectionString : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateTenantInput(JSON.parse(json));
    }
}

export class PagedResultDtoOfTenantDto { 
    totalCount: number; 
    items: TenantDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : null;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TenantDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTenantDto {
        return new PagedResultDtoOfTenantDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : null;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfTenantDto(JSON.parse(json));
    }
}

export class AuthenticateModel { 
    userNameOrEmailAddress: string; 
    password: string; 
    rememberClient: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userNameOrEmailAddress = data["userNameOrEmailAddress"] !== undefined ? data["userNameOrEmailAddress"] : null;
            this.password = data["password"] !== undefined ? data["password"] : null;
            this.rememberClient = data["rememberClient"] !== undefined ? data["rememberClient"] : null;
        }
    }

    static fromJS(data: any): AuthenticateModel {
        return new AuthenticateModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress !== undefined ? this.userNameOrEmailAddress : null;
        data["password"] = this.password !== undefined ? this.password : null;
        data["rememberClient"] = this.rememberClient !== undefined ? this.rememberClient : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuthenticateModel(JSON.parse(json));
    }
}

export class AuthenticateResultModel { 
    accessToken: string; 
    encryptedAccessToken: string; 
    expireInSeconds: number; 
    userId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.accessToken = data["accessToken"] !== undefined ? data["accessToken"] : null;
            this.encryptedAccessToken = data["encryptedAccessToken"] !== undefined ? data["encryptedAccessToken"] : null;
            this.expireInSeconds = data["expireInSeconds"] !== undefined ? data["expireInSeconds"] : null;
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
        }
    }

    static fromJS(data: any): AuthenticateResultModel {
        return new AuthenticateResultModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : null;
        data["encryptedAccessToken"] = this.encryptedAccessToken !== undefined ? this.encryptedAccessToken : null;
        data["expireInSeconds"] = this.expireInSeconds !== undefined ? this.expireInSeconds : null;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuthenticateResultModel(JSON.parse(json));
    }
}

export class ExternalLoginProviderInfoModel { 
    name: string; 
    clientId: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.clientId = data["clientId"] !== undefined ? data["clientId"] : null;
        }
    }

    static fromJS(data: any): ExternalLoginProviderInfoModel {
        return new ExternalLoginProviderInfoModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["clientId"] = this.clientId !== undefined ? this.clientId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalLoginProviderInfoModel(JSON.parse(json));
    }
}

export class ExternalAuthenticateModel { 
    authProvider: string; 
    providerKey: string; 
    providerAccessCode: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.authProvider = data["authProvider"] !== undefined ? data["authProvider"] : null;
            this.providerKey = data["providerKey"] !== undefined ? data["providerKey"] : null;
            this.providerAccessCode = data["providerAccessCode"] !== undefined ? data["providerAccessCode"] : null;
        }
    }

    static fromJS(data: any): ExternalAuthenticateModel {
        return new ExternalAuthenticateModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["authProvider"] = this.authProvider !== undefined ? this.authProvider : null;
        data["providerKey"] = this.providerKey !== undefined ? this.providerKey : null;
        data["providerAccessCode"] = this.providerAccessCode !== undefined ? this.providerAccessCode : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalAuthenticateModel(JSON.parse(json));
    }
}

export class ExternalAuthenticateResultModel { 
    accessToken: string; 
    encryptedAccessToken: string; 
    expireInSeconds: number; 
    waitingForActivation: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.accessToken = data["accessToken"] !== undefined ? data["accessToken"] : null;
            this.encryptedAccessToken = data["encryptedAccessToken"] !== undefined ? data["encryptedAccessToken"] : null;
            this.expireInSeconds = data["expireInSeconds"] !== undefined ? data["expireInSeconds"] : null;
            this.waitingForActivation = data["waitingForActivation"] !== undefined ? data["waitingForActivation"] : null;
        }
    }

    static fromJS(data: any): ExternalAuthenticateResultModel {
        return new ExternalAuthenticateResultModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : null;
        data["encryptedAccessToken"] = this.encryptedAccessToken !== undefined ? this.encryptedAccessToken : null;
        data["expireInSeconds"] = this.expireInSeconds !== undefined ? this.expireInSeconds : null;
        data["waitingForActivation"] = this.waitingForActivation !== undefined ? this.waitingForActivation : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalAuthenticateResultModel(JSON.parse(json));
    }
}

export class CreateUserInput { 
    userName: string; 
    firstName: string; 
    lastName: string; 
    emailAddress: string; 
    isActive: boolean; 
    roles: string[]; 
    password: string; 
    confirmPassword: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : null;
            this.lastName = data["lastName"] !== undefined ? data["lastName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(item);
            }
            this.password = data["password"] !== undefined ? data["password"] : null;
            this.confirmPassword = data["confirmPassword"] !== undefined ? data["confirmPassword"] : null;
        }
    }

    static fromJS(data: any): CreateUserInput {
        return new CreateUserInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        data["password"] = this.password !== undefined ? this.password : null;
        data["confirmPassword"] = this.confirmPassword !== undefined ? this.confirmPassword : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateUserInput(JSON.parse(json));
    }
}

export class UserDto { 
    userName: string; 
    firstName: string; 
    lastName: string; 
    emailAddress: string; 
    isActive: boolean; 
    fullName: string; 
    lastLoginTime: moment.Moment; 
    creationTime: moment.Moment; 
    roles: string[]; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : null;
            this.lastName = data["lastName"] !== undefined ? data["lastName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            this.fullName = data["fullName"] !== undefined ? data["fullName"] : null;
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(item);
            }
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): UserDto {
        return new UserDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : null;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserDto(JSON.parse(json));
    }
}

export class UpdateUserInput { 
    userName: string; 
    firstName: string; 
    lastName: string; 
    emailAddress: string; 
    isActive: boolean; 
    fullName: string; 
    lastLoginTime: moment.Moment; 
    creationTime: moment.Moment; 
    roles: string[]; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : null;
            this.lastName = data["lastName"] !== undefined ? data["lastName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            this.fullName = data["fullName"] !== undefined ? data["fullName"] : null;
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(item);
            }
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): UpdateUserInput {
        return new UpdateUserInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : null;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateUserInput(JSON.parse(json));
    }
}

export class ProhibitPermissionInput { 
    userId: number; 
    permissionName: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.permissionName = data["permissionName"] !== undefined ? data["permissionName"] : null;
        }
    }

    static fromJS(data: any): ProhibitPermissionInput {
        return new ProhibitPermissionInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["permissionName"] = this.permissionName !== undefined ? this.permissionName : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ProhibitPermissionInput(JSON.parse(json));
    }
}

export class UserPermissionsInput { 
    id: number; 
    grantedPermissionNames: string[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): UserPermissionsInput {
        return new UserPermissionsInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserPermissionsInput(JSON.parse(json));
    }
}

export class ChangeUserPasswordInput { 
    id: number; 
    password: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.password = data["password"] !== undefined ? data["password"] : null;
        }
    }

    static fromJS(data: any): ChangeUserPasswordInput {
        return new ChangeUserPasswordInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        data["password"] = this.password !== undefined ? this.password : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ChangeUserPasswordInput(JSON.parse(json));
    }
}

export class PagedResultDtoOfUserDto { 
    totalCount: number; 
    items: UserDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : null;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfUserDto {
        return new PagedResultDtoOfUserDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : null;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfUserDto(JSON.parse(json));
    }
}

export class UserProfileInfoDto { 
    firstName: string; 
    lastName: string; 
    userName: string; 
    phoneNumber: string; 
    emailAddress: string; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : null;
            this.lastName = data["lastName"] !== undefined ? data["lastName"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.phoneNumber = data["phoneNumber"] !== undefined ? data["phoneNumber"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): UserProfileInfoDto {
        return new UserProfileInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["firstName"] = this.firstName !== undefined ? this.firstName : null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserProfileInfoDto(JSON.parse(json));
    }
}

export class UpdateUserProfileInput { 
    firstName: string; 
    lastName: string; 
    emailAddress: string; 
    phoneNumber: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : null;
            this.lastName = data["lastName"] !== undefined ? data["lastName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.phoneNumber = data["phoneNumber"] !== undefined ? data["phoneNumber"] : null;
        }
    }

    static fromJS(data: any): UpdateUserProfileInput {
        return new UpdateUserProfileInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["firstName"] = this.firstName !== undefined ? this.firstName : null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateUserProfileInput(JSON.parse(json));
    }
}

export class ChangePasswordInput { 
    password: string; 
    newPassword: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.password = data["password"] !== undefined ? data["password"] : null;
            this.newPassword = data["newPassword"] !== undefined ? data["newPassword"] : null;
        }
    }

    static fromJS(data: any): ChangePasswordInput {
        return new ChangePasswordInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["password"] = this.password !== undefined ? this.password : null;
        data["newPassword"] = this.newPassword !== undefined ? this.newPassword : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ChangePasswordInput(JSON.parse(json));
    }
}

export enum IsTenantAvailableOutputState {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result?: any; 

    constructor(message: string, status: number, response: string, result?: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}