var studiox = studiox || {};
(function ($) {

    /* Application paths *****************************************/

    //Current application root path (including virtual directory if exists).
    studiox.appPath = studiox.appPath || '/';

    studiox.pageLoadTime = new Date();

    //Converts given path to absolute path using studiox.appPath variable.
    studiox.toAbsAppPath = function (path) {
        if (path.indexOf('/') == 0) {
            path = path.substring(1);
        }

        return studiox.appPath + path;
    };

    /* MULTITENANCY */

    studiox.multiTenancy = studiox.multiTenancy || {};

    studiox.multiTenancy.isEnabled = false;

    studiox.multiTenancy.sides = {
        TENANT: 1,
        HOST: 2
    };

    studiox.multiTenancy.tenantIdCookieName = 'StudioX.TenantId';

    studiox.multiTenancy.setTenantIdCookie = function (tenantId) {
        if (tenantId) {
            studiox.utils.setCookieValue(
                studiox.multiTenancy.tenantIdCookieName,
                tenantId.toString(),
                new Date(new Date().getTime() + 5 * 365 * 86400000), //5 years
                studiox.appPath
            );
        } else {
            studiox.utils.deleteCookie(studiox.multiTenancy.tenantIdCookieName, studiox.appPath);
        }
    };

    studiox.multiTenancy.getTenantIdCookie = function () {
        var value = studiox.utils.getCookieValue(studiox.multiTenancy.tenantIdCookieName);
        if (!value) {
            return null;
        }

        return parseInt(value);
    }

    /* SESSION */

    studiox.session = studiox.session ||
    {
        multiTenancySide: studiox.multiTenancy.sides.HOST
    };

    /* LOCALIZATION ***********************************************/
    //Implements Localization API that simplifies usage of localization scripts generated by StudioX.

    studiox.localization = studiox.localization || {};

    studiox.localization.languages = [];

    studiox.localization.currentLanguage = {};

    studiox.localization.sources = [];

    studiox.localization.values = {};

    studiox.localization.localize = function (key, sourceName) {
        sourceName = sourceName || studiox.localization.defaultSourceName;

        var source = studiox.localization.values[sourceName];

        if (!source) {
            studiox.log.warn('Could not find localization source: ' + sourceName);
            return key;
        }

        var value = source[key];
        if (value == undefined) {
            return key;
        }

        var copiedArguments = Array.prototype.slice.call(arguments, 0);
        copiedArguments.splice(1, 1);
        copiedArguments[0] = value;

        return studiox.utils.formatString.apply(this, copiedArguments);
    };

    studiox.localization.getSource = function (sourceName) {
        return function (key) {
            var copiedArguments = Array.prototype.slice.call(arguments, 0);
            copiedArguments.splice(1, 0, sourceName);
            return studiox.localization.localize.apply(this, copiedArguments);
        };
    };

    studiox.localization.isCurrentCulture = function (name) {
        return studiox.localization.currentCulture
            && studiox.localization.currentCulture.name
            && studiox.localization.currentCulture.name.indexOf(name) == 0;
    };

    studiox.localization.defaultSourceName = undefined;
    studiox.localization.studioxWeb = studiox.localization.getSource('StudioXWeb');

    /* AUTHORIZATION **********************************************/
    //Implements Authorization API that simplifies usage of authorization scripts generated by StudioX.

    studiox.auth = studiox.auth || {};

    studiox.auth.allPermissions = studiox.auth.allPermissions || {};

    studiox.auth.grantedPermissions = studiox.auth.grantedPermissions || {};

    //Deprecated. Use studiox.auth.isGranted instead.
    studiox.auth.hasPermission = function (permissionName) {
        return studiox.auth.isGranted.apply(this, arguments);
    };

    //Deprecated. Use studiox.auth.isAnyGranted instead.
    studiox.auth.hasAnyOfPermissions = function () {
        return studiox.auth.isAnyGranted.apply(this, arguments);
    };

    //Deprecated. Use studiox.auth.areAllGranted instead.
    studiox.auth.hasAllOfPermissions = function () {
        return studiox.auth.areAllGranted.apply(this, arguments);
    };

    studiox.auth.isGranted = function (permissionName) {
        return studiox.auth.allPermissions[permissionName] != undefined && studiox.auth.grantedPermissions[permissionName] != undefined;
    };

    studiox.auth.isAnyGranted = function () {
        if (!arguments || arguments.length <= 0) {
            return true;
        }

        for (var i = 0; i < arguments.length; i++) {
            if (studiox.auth.isGranted(arguments[i])) {
                return true;
            }
        }

        return false;
    };

    studiox.auth.areAllGranted = function () {
        if (!arguments || arguments.length <= 0) {
            return true;
        }

        for (var i = 0; i < arguments.length; i++) {
            if (!studiox.auth.isGranted(arguments[i])) {
                return false;
            }
        }

        return true;
    };

    studiox.auth.tokenCookieName = 'StudioX.AuthToken';

    studiox.auth.setToken = function (authToken, expireDate) {
        studiox.utils.setCookieValue(studiox.auth.tokenCookieName, authToken, expireDate, studiox.appPath);
    };

    studiox.auth.getToken = function () {
        return studiox.utils.getCookieValue(studiox.auth.tokenCookieName);
    }

    studiox.auth.clearToken = function () {
        studiox.auth.setToken();
    }

    /* FEATURE SYSTEM *********************************************/
    //Implements Features API that simplifies usage of feature scripts generated by StudioX.

    studiox.features = studiox.features || {};

    studiox.features.allFeatures = studiox.features.allFeatures || {};

    studiox.features.get = function (name) {
        return studiox.features.allFeatures[name];
    }

    studiox.features.getValue = function (name) {
        var feature = studiox.features.get(name);
        if (feature == undefined) {
            return undefined;
        }

        return feature.value;
    }

    studiox.features.isEnabled = function (name) {
        var value = studiox.features.getValue(name);
        return value == 'true' || value == 'True';
    }

    /* SETTINGS **************************************************/
    //Implements Settings API that simplifies usage of setting scripts generated by StudioX.

    studiox.setting = studiox.setting || {};

    studiox.setting.values = studiox.setting.values || {};

    studiox.setting.get = function (name) {
        return studiox.setting.values[name];
    };

    studiox.setting.getBoolean = function (name) {
        var value = studiox.setting.get(name);
        return value == 'true' || value == 'True';
    };

    studiox.setting.getInt = function (name) {
        return parseInt(studiox.setting.values[name]);
    };

    /* REALTIME NOTIFICATIONS ************************************/

    studiox.notifications = studiox.notifications || {};

    studiox.notifications.severity = {
        INFO: 0,
        SUCCESS: 1,
        WARN: 2,
        ERROR: 3,
        FATAL: 4
    };

    studiox.notifications.userNotificationState = {
        UNREAD: 0,
        READ: 1
    };

    studiox.notifications.getUserNotificationStateAsString = function (userNotificationState) {
        switch (userNotificationState) {
            case studiox.notifications.userNotificationState.READ:
                return 'READ';
            case studiox.notifications.userNotificationState.UNREAD:
                return 'UNREAD';
            default:
                studiox.log.warn('Unknown user notification state value: ' + userNotificationState)
                return '?';
        }
    };

    studiox.notifications.getUiNotifyFuncBySeverity = function (severity) {
        switch (severity) {
            case studiox.notifications.severity.SUCCESS:
                return studiox.notify.success;
            case studiox.notifications.severity.WARN:
                return studiox.notify.warn;
            case studiox.notifications.severity.ERROR:
                return studiox.notify.error;
            case studiox.notifications.severity.FATAL:
                return studiox.notify.error;
            case studiox.notifications.severity.INFO:
            default:
                return studiox.notify.info;
        }
    };

    studiox.notifications.messageFormatters = {};

    studiox.notifications.messageFormatters['StudioX.Notifications.MessageNotificationData'] = function (userNotification) {
        return userNotification.notification.data.message || userNotification.notification.data.properties.Message;
    };

    studiox.notifications.messageFormatters['StudioX.Notifications.LocalizableMessageNotificationData'] = function (userNotification) {
        var message = userNotification.notification.data.message || userNotification.notification.data.properties.Message;
        var localizedMessage = studiox.localization.localize(
            message.name,
            message.sourceName
        );

        if (userNotification.notification.data.properties) {
            if ($) {
                //Prefer to use jQuery if possible
                $.each(userNotification.notification.data.properties, function (key, value) {
                    localizedMessage = localizedMessage.replace('{' + key + '}', value);
                });
            } else {
                //alternative for $.each
                var properties = Object.keys(userNotification.notification.data.properties);
                for (var i = 0; i < properties.length; i++) {
                    localizedMessage = localizedMessage.replace('{' + properties[i] + '}', userNotification.notification.data.properties[properties[i]]);
                }
            }
        }

        return localizedMessage;
    };

    studiox.notifications.getFormattedMessageFromUserNotification = function (userNotification) {
        var formatter = studiox.notifications.messageFormatters[userNotification.notification.data.type];
        if (!formatter) {
            studiox.log.warn('No message formatter defined for given data type: ' + userNotification.notification.data.type)
            return '?';
        }

        if (!studiox.utils.isFunction(formatter)) {
            studiox.log.warn('Message formatter should be a function! It is invalid for data type: ' + userNotification.notification.data.type)
            return '?';
        }

        return formatter(userNotification);
    }

    studiox.notifications.showUiNotifyForUserNotification = function (userNotification, options) {
        var message = studiox.notifications.getFormattedMessageFromUserNotification(userNotification);
        var uiNotifyFunc = studiox.notifications.getUiNotifyFuncBySeverity(userNotification.notification.severity);
        uiNotifyFunc(message, undefined, options);
    }

    /* LOGGING ***************************************************/
    //Implements Logging API that provides secure & controlled usage of console.log

    studiox.log = studiox.log || {};

    studiox.log.levels = {
        DEBUG: 1,
        INFO: 2,
        WARN: 3,
        ERROR: 4,
        FATAL: 5
    };

    studiox.log.level = studiox.log.levels.DEBUG;

    studiox.log.log = function (logObject, logLevel) {
        if (!window.console || !window.console.log) {
            return;
        }

        if (logLevel != undefined && logLevel < studiox.log.level) {
            return;
        }

        console.log(logObject);
    };

    studiox.log.debug = function (logObject) {
        studiox.log.log("DEBUG: ", studiox.log.levels.DEBUG);
        studiox.log.log(logObject, studiox.log.levels.DEBUG);
    };

    studiox.log.info = function (logObject) {
        studiox.log.log("INFO: ", studiox.log.levels.INFO);
        studiox.log.log(logObject, studiox.log.levels.INFO);
    };

    studiox.log.warn = function (logObject) {
        studiox.log.log("WARN: ", studiox.log.levels.WARN);
        studiox.log.log(logObject, studiox.log.levels.WARN);
    };

    studiox.log.error = function (logObject) {
        studiox.log.log("ERROR: ", studiox.log.levels.ERROR);
        studiox.log.log(logObject, studiox.log.levels.ERROR);
    };

    studiox.log.fatal = function (logObject) {
        studiox.log.log("FATAL: ", studiox.log.levels.FATAL);
        studiox.log.log(logObject, studiox.log.levels.FATAL);
    };

    /* NOTIFICATION *********************************************/
    //Defines Notification API, not implements it

    studiox.notify = studiox.notify || {};

    studiox.notify.success = function (message, title, options) {
        studiox.log.warn('studiox.notify.success is not implemented!');
    };

    studiox.notify.info = function (message, title, options) {
        studiox.log.warn('studiox.notify.info is not implemented!');
    };

    studiox.notify.warn = function (message, title, options) {
        studiox.log.warn('studiox.notify.warn is not implemented!');
    };

    studiox.notify.error = function (message, title, options) {
        studiox.log.warn('studiox.notify.error is not implemented!');
    };

    /* MESSAGE **************************************************/
    //Defines Message API, not implements it

    studiox.message = studiox.message || {};

    var showMessage = function (message, title) {
        alert((title || '') + ' ' + message);

        if (!$) {
            studiox.log.warn('studiox.message can not return promise since jQuery is not defined!');
            return null;
        }

        return $.Deferred(function ($dfd) {
            $dfd.resolve();
        });
    };

    studiox.message.info = function (message, title) {
        studiox.log.warn('studiox.message.info is not implemented!');
        return showMessage(message, title);
    };

    studiox.message.success = function (message, title) {
        studiox.log.warn('studiox.message.success is not implemented!');
        return showMessage(message, title);
    };

    studiox.message.warn = function (message, title) {
        studiox.log.warn('studiox.message.warn is not implemented!');
        return showMessage(message, title);
    };

    studiox.message.error = function (message, title) {
        studiox.log.warn('studiox.message.error is not implemented!');
        return showMessage(message, title);
    };

    studiox.message.confirm = function (message, titleOrCallback, callback) {
        studiox.log.warn('studiox.message.confirm is not implemented!');

        if (titleOrCallback && !(typeof titleOrCallback == 'string')) {
            callback = titleOrCallback;
        }

        var result = confirm(message);
        callback && callback(result);

        if (!$) {
            studiox.log.warn('studiox.message can not return promise since jQuery is not defined!');
            return null;
        }

        return $.Deferred(function ($dfd) {
            $dfd.resolve();
        });
    };

    /* UI *******************************************************/

    studiox.ui = studiox.ui || {};

    /* UI BLOCK */
    //Defines UI Block API, not implements it

    studiox.ui.block = function (elm) {
        studiox.log.warn('studiox.ui.block is not implemented!');
    };

    studiox.ui.unblock = function (elm) {
        studiox.log.warn('studiox.ui.unblock is not implemented!');
    };

    /* UI BUSY */
    //Defines UI Busy API, not implements it

    studiox.ui.setBusy = function (elm, optionsOrPromise) {
        studiox.log.warn('studiox.ui.setBusy is not implemented!');
    };

    studiox.ui.clearBusy = function (elm) {
        studiox.log.warn('studiox.ui.clearBusy is not implemented!');
    };

    /* SIMPLE EVENT BUS *****************************************/

    studiox.event = (function () {

        var _callbacks = {};

        var on = function (eventName, callback) {
            if (!_callbacks[eventName]) {
                _callbacks[eventName] = [];
            }

            _callbacks[eventName].push(callback);
        };

        var off = function (eventName, callback) {
            var callbacks = _callbacks[eventName];
            if (!callbacks) {
                return;
            }

            var index = -1;
            for (var i = 0; i < callbacks.length; i++) {
                if (callbacks[i] === callback) {
                    index = i;
                    break;
                }
            }

            if (index < 0) {
                return;
            }

            _callbacks[eventName].splice(index, 1);
        };

        var trigger = function (eventName) {
            var callbacks = _callbacks[eventName];
            if (!callbacks || !callbacks.length) {
                return;
            }

            var args = Array.prototype.slice.call(arguments, 1);
            for (var i = 0; i < callbacks.length; i++) {
                callbacks[i].apply(this, args);
            }
        };

        // Public interface ///////////////////////////////////////////////////

        return {
            on: on,
            off: off,
            trigger: trigger
        };
    })();


    /* UTILS ***************************************************/

    studiox.utils = studiox.utils || {};

    /* Creates a name namespace.
    *  Example:
    *  var taskService = studiox.utils.createNamespace(studiox, 'services.task');
    *  taskService will be equal to studiox.services.task
    *  first argument (root) must be defined first
    ************************************************************/
    studiox.utils.createNamespace = function (root, ns) {
        var parts = ns.split('.');
        for (var i = 0; i < parts.length; i++) {
            if (typeof root[parts[i]] == 'undefined') {
                root[parts[i]] = {};
            }

            root = root[parts[i]];
        }

        return root;
    };

    /* Find and replaces a string (search) to another string (replacement) in
    *  given string (str).
    *  Example:
    *  studiox.utils.replaceAll('This is a test string', 'is', 'X') = 'ThX X a test string'
    ************************************************************/
    studiox.utils.replaceAll = function (str, search, replacement) {
        var fix = search.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        return str.replace(new RegExp(fix, 'g'), replacement);
    };

    /* Formats a string just like string.format in C#.
    *  Example:
    *  studiox.utils.formatString('Hello {0}','Tuana') = 'Hello Tuana'
    ************************************************************/
    studiox.utils.formatString = function () {
        if (arguments.length < 1) {
            return null;
        }

        var str = arguments[0];

        for (var i = 1; i < arguments.length; i++) {
            var placeHolder = '{' + (i - 1) + '}';
            str = studiox.utils.replaceAll(str, placeHolder, arguments[i]);
        }

        return str;
    };

    studiox.utils.toPascalCase = function (str) {
        if (!str || !str.length) {
            return str;
        }

        if (str.length === 1) {
            return str.charAt(0).toUpperCase();
        }

        return str.charAt(0).toUpperCase() + str.substr(1);
    }

    studiox.utils.toCamelCase = function (str) {
        if (!str || !str.length) {
            return str;
        }

        if (str.length === 1) {
            return str.charAt(0).toLowerCase();
        }

        return str.charAt(0).toLowerCase() + str.substr(1);
    }

    studiox.utils.truncateString = function (str, maxLength) {
        if (!str || !str.length || str.length <= maxLength) {
            return str;
        }

        return str.substr(0, maxLength);
    };

    studiox.utils.truncateStringWithPostfix = function (str, maxLength, postfix) {
        postfix = postfix || '...';

        if (!str || !str.length || str.length <= maxLength) {
            return str;
        }

        if (maxLength <= postfix.length) {
            return postfix.substr(0, maxLength);
        }

        return str.substr(0, maxLength - postfix.length) + postfix;
    };

    studiox.utils.isFunction = function (obj) {
        if ($) {
            //Prefer to use jQuery if possible
            return $.isFunction(obj);
        }

        //alternative for $.isFunction
        return !!(obj && obj.constructor && obj.call && obj.apply);
    };

    /**
     * parameterInfos should be an array of { name, value } objects
     * where name is query string parameter name and value is it's value.
     * includeQuestionMark is true by default.
     */
    studiox.utils.buildQueryString = function (parameterInfos, includeQuestionMark) {
        if (includeQuestionMark === undefined) {
            includeQuestionMark = true;
        }


        var qs = '';

        function addSeperator() {
            if (!qs.length) {
                if (includeQuestionMark) {
                    qs = qs + '?';
                }
            } else {
                qs = qs + '&';
            }
        }

        for (var i = 0; i < parameterInfos.length; ++i) {
            var parameterInfo = parameterInfos[i];
            if (parameterInfo.value === undefined) {
                continue;
            }

            if (parameterInfo.value === null) {
                parameterInfo.value = '';
            }

            addSeperator();

            if (parameterInfo.value.toJSON && typeof parameterInfo.value.toJSON === "function") {
                qs = qs + parameterInfo.name + '=' + encodeURIComponent(parameterInfo.value.toJSON());
            } else if (Array.isArray(parameterInfo.value) && parameterInfo.value.length) {
                for (var j = 0; j < parameterInfo.value.length; j++) {
                    if (j > 0) {
                        addSeperator();
                    }

                    qs = qs + parameterInfo.name + '[' + j + ']=' + encodeURIComponent(parameterInfo.value[j]);
                }
            } else {
                qs = qs + parameterInfo.name + '=' + encodeURIComponent(parameterInfo.value);
            }
        }

        return qs;
    }

    /**
     * Sets a cookie value for given key.
     * This is a simple implementation created to be used by StudioX.
     * Please use a complete cookie library if you need.
     * @param {string} key
     * @param {string} value 
     * @param {Date} expireDate (optional). If not specified the cookie will expire at the end of session.
     * @param {string} path (optional)
     */
    studiox.utils.setCookieValue = function (key, value, expireDate, path) {
        var cookieValue = encodeURIComponent(key) + '=';

        if (value) {
            cookieValue = cookieValue + encodeURIComponent(value);
        }

        if (expireDate) {
            cookieValue = cookieValue + "; expires=" + expireDate.toUTCString();
        }

        if (path) {
            cookieValue = cookieValue + "; path=" + path;
        }

        document.cookie = cookieValue;
    };

    /**
     * Gets a cookie with given key.
     * This is a simple implementation created to be used by StudioX.
     * Please use a complete cookie library if you need.
     * @param {string} key
     * @returns {string} Cookie value or null
     */
    studiox.utils.getCookieValue = function (key) {
        var equalities = document.cookie.split('; ');
        for (var i = 0; i < equalities.length; i++) {
            if (!equalities[i]) {
                continue;
            }

            var splitted = equalities[i].split('=');
            if (splitted.length != 2) {
                continue;
            }

            if (decodeURIComponent(splitted[0]) === key) {
                return decodeURIComponent(splitted[1] || '');
            }
        }

        return null;
    };

    /**
     * Deletes cookie for given key.
     * This is a simple implementation created to be used by StudioX.
     * Please use a complete cookie library if you need.
     * @param {string} key
     * @param {string} path (optional)
     */
    studiox.utils.deleteCookie = function (key, path) {
        var cookieValue = encodeURIComponent(key) + '=';

        cookieValue = cookieValue + "; expires=" + (new Date(new Date().getTime() - 86400000)).toUTCString();

        if (path) {
            cookieValue = cookieValue + "; path=" + path;
        }

        document.cookie = cookieValue;
    }

    /* TIMING *****************************************/
    studiox.timing = studiox.timing || {};

    studiox.timing.utcClockProvider = (function () {

        var toUtc = function (date) {
            return Date.UTC(
                date.getUTCFullYear()
                , date.getUTCMonth()
                , date.getUTCDate()
                , date.getUTCHours()
                , date.getUTCMinutes()
                , date.getUTCSeconds()
                , date.getUTCMilliseconds()
            );
        }

        var now = function () {
            return new Date();
        };

        var normalize = function (date) {
            if (!date) {
                return date;
            }

            return new Date(toUtc(date));
        };

        // Public interface ///////////////////////////////////////////////////

        return {
            now: now,
            normalize: normalize,
            supportsMultipleTimezone: true
        };
    })();

    studiox.timing.localClockProvider = (function () {

        var toLocal = function (date) {
            return new Date(
                date.getFullYear()
                , date.getMonth()
                , date.getDate()
                , date.getHours()
                , date.getMinutes()
                , date.getSeconds()
                , date.getMilliseconds()
            );
        }

        var now = function () {
            return toLocal(new Date());
        }

        var normalize = function (date) {
            if (!date) {
                return date;
            }

            return toLocal(date);
        }

        // Public interface ///////////////////////////////////////////////////

        return {
            now: now,
            normalize: normalize,
            supportsMultipleTimezone: false
        };
    })();

    studiox.timing.unspecifiedClockProvider = (function () {

        var now = function () {
            return new Date();
        }

        var normalize = function (date) {
            return date;
        }

        // Public interface ///////////////////////////////////////////////////

        return {
            now: now,
            normalize: normalize,
            supportsMultipleTimezone: false
        };
    })();

    studiox.timing.convertToUserTimezone = function (date) {
        var localTime = date.getTime();
        var utcTime = localTime + (date.getTimezoneOffset() * 60000);
        var targetTime = parseInt(utcTime) + parseInt(studiox.timing.timeZoneInfo.windows.currentUtcOffsetInMilliseconds);
        return new Date(targetTime);
    };

    /* CLOCK *****************************************/
    studiox.clock = studiox.clock || {};

    studiox.clock.now = function () {
        if (studiox.clock.provider) {
            return studiox.clock.provider.now();
        }

        return new Date();
    }

    studiox.clock.normalize = function (date) {
        if (studiox.clock.provider) {
            return studiox.clock.provider.normalize(date);
        }

        return date;
    }

    studiox.clock.provider = studiox.timing.unspecifiedClockProvider;

    /* SECURITY ***************************************/
    studiox.security = studiox.security || {};
    studiox.security.antiForgery = studiox.security.antiForgery || {};

    studiox.security.antiForgery.tokenCookieName = 'XSRF-TOKEN';
    studiox.security.antiForgery.tokenHeaderName = 'X-XSRF-TOKEN';

    studiox.security.antiForgery.getToken = function () {
        return studiox.utils.getCookieValue(studiox.security.antiForgery.tokenCookieName);
    };

})(jQuery);